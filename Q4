Question : A number is called as a Jumping Number if all adjacent digits in it differ by 1. The difference between ‘9’ and ‘0’ is not considered as 1.
All single digit numbers are considered as Jumping Numbers. For example 7, 8987 and 4343456 are Jumping numbers but 796 and 89098 are not.

Given a positive number x, print all Jumping Numbers smaller than or equal to x. The numbers can be printed in any order.


Code : 

// Finds and prints all jumping numbers smaller than or 
// equal to x. 
#include <bits/stdc++.h> 
using namespace std; 

// Prints all jumping numbers smaller than or equal to x starting 
// with 'num'. It mainly does BFS starting from 'num'. 
void bfs(int x, int num) 
{ 
	// Create a queue and enqueue 'i' to it 
	queue<int> q; 
	q.push(num); 

	// Do BFS starting from i 
	while (!q.empty()) { 
		num = q.front(); 
		q.pop(); 

		if (num <= x) { 
			cout << num << " "; 
			int last_dig = num % 10; 

			// If last digit is 0, append next digit only 
			if (last_dig == 0) 
				q.push((num * 10) + (last_dig + 1)); 

			// If last digit is 9, append previous digit only 
			else if (last_dig == 9) 
				q.push((num * 10) + (last_dig - 1)); 

			// If last digit is neighter 0 nor 9, append both 
			// previous and next digits 
			else { 
				q.push((num * 10) + (last_dig - 1)); 
				q.push((num * 10) + (last_dig + 1)); 
			} 
		} 
	} 
} 

// Prints all jumping numbers smaller than or equal to 
// a positive number x 
void printJumping(int x) 
{ 
	cout << 0 << " "; 
	for (int i = 1; i <= 9 && i <= x; i++) 
		bfs(x, i); 
} 

// Driver program 
int main() 
{ 
	int x = 40; 
	printJumping(x); 
	return 0; 
} 
